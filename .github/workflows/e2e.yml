name: 'e2e Tests'

on:
  repository_dispatch:
    types: [ok-to-test-command]

jobs:
  e2e:
    name: ${{ matrix.name }}
    runs-on: ubuntu-latest
    if: 
      github.event_name == 'repository_dispatch' &&
      github.event.client_payload.slash_command.sha != '' &&
      contains(github.event.client_payload.pull_request.head.sha, github.event.client_payload.slash_command.sha)
    strategy:
      fail-fast: false
      matrix:
        include:
          - image: A
          - image: B

    steps:
      - name: Check out code
        uses: actions/checkout@v2
        with:
          ref: 'refs/pull/${{ github.event.client_payload.pull_request.number }}/merge'

      - name: Create check run
        uses: actions/github-script@v5
        if: ${{ always() }}
        env:
          image: ${{ matrix.image }}
          number: ${{ github.event.client_payload.pull_request.number }}
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const { data: pull } = await github.rest.pulls.get({
              ...context.repo,
              pull_number: process.env.number
            });
            const sha = pull.head.sha;
            const { data: check } = await github.rest.checks.create({
              ...context.repo,
              name: process.env.image,
              head_sha: sha
            });
            return check;

      - name: Update check run
        uses: actions/github-script@v5
        if: ${{ always() }}
        env:
          number: ${{ github.event.client_payload.pull_request.number }}
          job: ${{ github.job }}
          conclusion: ${{ job.status }}
          image: ${{ matrix.image }}
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const { data: pull } = await github.rest.pulls.get({
              ...context.repo,
              pull_number: process.env.number
            });
            const ref = pull.head.sha;

            const { data: checks } = await github.rest.checks.listForRef({
              ...context.repo,
              ref
            });

            const check = checks.check_runs.filter(c => c.name === process.env.image);
            const { data: result } = await github.rest.checks.update({
              ...context.repo,
              check_run_id: check[0].id,
              status: 'completed',
              conclusion: process.env.conclusion
            });
            return result;
      
      - name: Dump context
        if: always()
        uses: crazy-max/ghaction-dump-context@v1
